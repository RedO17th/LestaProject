//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input system.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputsystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputsystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input system"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""978a7435-b143-447f-939b-8f24df457dc6"",
            ""actions"": [
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""c43ffd9e-fc6b-44d7-a955-d794b151ee90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""ced65955-6578-4d31-9c09-1e529ea915c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C"",
                    ""type"": ""Button"",
                    ""id"": ""c1915376-a326-4257-987b-d9386f5cbb87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""V"",
                    ""type"": ""Button"",
                    ""id"": ""2b1edd7a-a81f-465c-ad49-6006e3d85890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""08bed030-2379-4919-a571-30044ef9d94b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""N"",
                    ""type"": ""Button"",
                    ""id"": ""bc846947-f37f-4fc4-a8c4-627ef6c88bb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M"",
                    ""type"": ""Button"",
                    ""id"": ""b08174aa-3f24-4fea-a03d-af61e0028326"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f453ff8-1f24-492b-ab52-8126865e22f3"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""699eda6e-0d1d-4d7e-b6f8-e8613f791e18"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6526e188-acc4-4ad1-a261-e616784e8d84"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28c6da7d-9695-4023-a0e3-5dd00d69b67e"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""V"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11fff762-915d-4fcb-8fa5-6ce528bb2c60"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e9cf300-b878-4d53-870c-b2154e497177"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""N"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eff719a4-5341-4e74-88d3-6345bb827e87"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard + Mouse"",
                    ""action"": ""M"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard + Mouse"",
            ""bindingGroup"": ""Keyboard + Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Z = m_Newactionmap.FindAction("Z", throwIfNotFound: true);
        m_Newactionmap_X = m_Newactionmap.FindAction("X", throwIfNotFound: true);
        m_Newactionmap_C = m_Newactionmap.FindAction("C", throwIfNotFound: true);
        m_Newactionmap_V = m_Newactionmap.FindAction("V", throwIfNotFound: true);
        m_Newactionmap_B = m_Newactionmap.FindAction("B", throwIfNotFound: true);
        m_Newactionmap_N = m_Newactionmap.FindAction("N", throwIfNotFound: true);
        m_Newactionmap_M = m_Newactionmap.FindAction("M", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_Z;
    private readonly InputAction m_Newactionmap_X;
    private readonly InputAction m_Newactionmap_C;
    private readonly InputAction m_Newactionmap_V;
    private readonly InputAction m_Newactionmap_B;
    private readonly InputAction m_Newactionmap_N;
    private readonly InputAction m_Newactionmap_M;
    public struct NewactionmapActions
    {
        private @Inputsystem m_Wrapper;
        public NewactionmapActions(@Inputsystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Z => m_Wrapper.m_Newactionmap_Z;
        public InputAction @X => m_Wrapper.m_Newactionmap_X;
        public InputAction @C => m_Wrapper.m_Newactionmap_C;
        public InputAction @V => m_Wrapper.m_Newactionmap_V;
        public InputAction @B => m_Wrapper.m_Newactionmap_B;
        public InputAction @N => m_Wrapper.m_Newactionmap_N;
        public InputAction @M => m_Wrapper.m_Newactionmap_M;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @Z.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnZ;
                @Z.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnZ;
                @Z.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnZ;
                @X.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnX;
                @C.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnC;
                @C.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnC;
                @C.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnC;
                @V.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnV;
                @V.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnV;
                @V.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnV;
                @B.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnB;
                @N.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnN;
                @N.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnN;
                @N.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnN;
                @M.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnM;
                @M.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnM;
                @M.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnM;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Z.started += instance.OnZ;
                @Z.performed += instance.OnZ;
                @Z.canceled += instance.OnZ;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @C.started += instance.OnC;
                @C.performed += instance.OnC;
                @C.canceled += instance.OnC;
                @V.started += instance.OnV;
                @V.performed += instance.OnV;
                @V.canceled += instance.OnV;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
                @N.started += instance.OnN;
                @N.performed += instance.OnN;
                @N.canceled += instance.OnN;
                @M.started += instance.OnM;
                @M.performed += instance.OnM;
                @M.canceled += instance.OnM;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard + Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface INewactionmapActions
    {
        void OnZ(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnC(InputAction.CallbackContext context);
        void OnV(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnN(InputAction.CallbackContext context);
        void OnM(InputAction.CallbackContext context);
    }
}
